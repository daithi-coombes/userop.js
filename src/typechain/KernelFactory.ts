/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface KernelFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createAccount"
      | "entryPoint"
      | "getAccountAddress"
      | "kernelTemplate"
      | "nextTemplate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createAccount",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountAddress",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kernelTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTemplate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kernelTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTemplate",
    data: BytesLike
  ): Result;
}

export namespace AccountCreatedEvent {
  export type InputTuple = [
    account: AddressLike,
    validator: AddressLike,
    data: BytesLike,
    index: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    validator: string,
    data: string,
    index: bigint
  ];
  export interface OutputObject {
    account: string;
    validator: string;
    data: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KernelFactory extends BaseContract {
  connect(runner?: ContractRunner | null): KernelFactory;
  waitForDeployment(): Promise<this>;

  interface: KernelFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAccount: TypedContractMethod<
    [_validator: AddressLike, _data: BytesLike, _index: BigNumberish],
    [string],
    "nonpayable"
  >;

  entryPoint: TypedContractMethod<[], [string], "view">;

  getAccountAddress: TypedContractMethod<
    [_validator: AddressLike, _data: BytesLike, _index: BigNumberish],
    [string],
    "view"
  >;

  kernelTemplate: TypedContractMethod<[], [string], "view">;

  nextTemplate: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createAccount"
  ): TypedContractMethod<
    [_validator: AddressLike, _data: BytesLike, _index: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountAddress"
  ): TypedContractMethod<
    [_validator: AddressLike, _data: BytesLike, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "kernelTemplate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextTemplate"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AccountCreated"
  ): TypedContractEvent<
    AccountCreatedEvent.InputTuple,
    AccountCreatedEvent.OutputTuple,
    AccountCreatedEvent.OutputObject
  >;

  filters: {
    "AccountCreated(address,address,bytes,uint256)": TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
    AccountCreated: TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
  };
}
