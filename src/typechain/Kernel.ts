/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ExecutionDetailStruct = {
  validUntil: BigNumberish;
  validAfter: BigNumberish;
  executor: AddressLike;
  validator: AddressLike;
};

export type ExecutionDetailStructOutput = [
  validUntil: bigint,
  validAfter: bigint,
  executor: string,
  validator: string
] & {
  validUntil: bigint;
  validAfter: bigint;
  executor: string;
  validator: string;
};

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export interface KernelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "disableMode"
      | "entryPoint"
      | "execute"
      | "getDefaultValidator"
      | "getDisabledMode"
      | "getExecution"
      | "getLastDisabledTime"
      | "getNonce(uint192)"
      | "getNonce()"
      | "initialize"
      | "isValidSignature"
      | "name"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "setDefaultValidator"
      | "setExecution"
      | "upgradeTo"
      | "validateUserOp"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DefaultValidatorChanged"
      | "ExecutionChanged"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "disableMode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisabledMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExecution",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDisabledTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce(uint192)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultValidator",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecution",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [UserOperationStruct, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "disableMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisabledMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDisabledTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonce(uint192)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace DefaultValidatorChangedEvent {
  export type InputTuple = [
    oldValidator: AddressLike,
    newValidator: AddressLike
  ];
  export type OutputTuple = [oldValidator: string, newValidator: string];
  export interface OutputObject {
    oldValidator: string;
    newValidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionChangedEvent {
  export type InputTuple = [
    selector: BytesLike,
    executor: AddressLike,
    validator: AddressLike
  ];
  export type OutputTuple = [
    selector: string,
    executor: string,
    validator: string
  ];
  export interface OutputObject {
    selector: string;
    executor: string;
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [newImplementation: AddressLike];
  export type OutputTuple = [newImplementation: string];
  export interface OutputObject {
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Kernel extends BaseContract {
  connect(runner?: ContractRunner | null): Kernel;
  waitForDeployment(): Promise<this>;

  interface: KernelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  disableMode: TypedContractMethod<
    [_disableFlag: BytesLike],
    [void],
    "nonpayable"
  >;

  entryPoint: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getDefaultValidator: TypedContractMethod<[], [string], "view">;

  getDisabledMode: TypedContractMethod<[], [string], "view">;

  getExecution: TypedContractMethod<
    [_selector: BytesLike],
    [ExecutionDetailStructOutput],
    "view"
  >;

  getLastDisabledTime: TypedContractMethod<[], [bigint], "view">;

  "getNonce(uint192)": TypedContractMethod<
    [key: BigNumberish],
    [bigint],
    "view"
  >;

  "getNonce()": TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [_defaultValidator: AddressLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  isValidSignature: TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  setDefaultValidator: TypedContractMethod<
    [_defaultValidator: AddressLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  setExecution: TypedContractMethod<
    [
      _selector: BytesLike,
      _executor: AddressLike,
      _validator: AddressLike,
      _validUntil: BigNumberish,
      _validAfter: BigNumberish,
      _enableData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [_newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  validateUserOp: TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "disableMode"
  ): TypedContractMethod<[_disableFlag: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDefaultValidator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDisabledMode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExecution"
  ): TypedContractMethod<
    [_selector: BytesLike],
    [ExecutionDetailStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastDisabledTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce(uint192)"
  ): TypedContractMethod<[key: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_defaultValidator: AddressLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [hash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDefaultValidator"
  ): TypedContractMethod<
    [_defaultValidator: AddressLike, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExecution"
  ): TypedContractMethod<
    [
      _selector: BytesLike,
      _executor: AddressLike,
      _validator: AddressLike,
      _validUntil: BigNumberish,
      _validAfter: BigNumberish,
      _enableData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [_newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DefaultValidatorChanged"
  ): TypedContractEvent<
    DefaultValidatorChangedEvent.InputTuple,
    DefaultValidatorChangedEvent.OutputTuple,
    DefaultValidatorChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionChanged"
  ): TypedContractEvent<
    ExecutionChangedEvent.InputTuple,
    ExecutionChangedEvent.OutputTuple,
    ExecutionChangedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "DefaultValidatorChanged(address,address)": TypedContractEvent<
      DefaultValidatorChangedEvent.InputTuple,
      DefaultValidatorChangedEvent.OutputTuple,
      DefaultValidatorChangedEvent.OutputObject
    >;
    DefaultValidatorChanged: TypedContractEvent<
      DefaultValidatorChangedEvent.InputTuple,
      DefaultValidatorChangedEvent.OutputTuple,
      DefaultValidatorChangedEvent.OutputObject
    >;

    "ExecutionChanged(bytes4,address,address)": TypedContractEvent<
      ExecutionChangedEvent.InputTuple,
      ExecutionChangedEvent.OutputTuple,
      ExecutionChangedEvent.OutputObject
    >;
    ExecutionChanged: TypedContractEvent<
      ExecutionChangedEvent.InputTuple,
      ExecutionChangedEvent.OutputTuple,
      ExecutionChangedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
