/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: AddressLike;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    facetAddress: string,
    action: bigint,
    functionSelectors: string[]
  ] & { facetAddress: string; action: bigint; functionSelectors: string[] };
}

export interface BarzAccountFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "entryPoint"
      | "execute"
      | "executeBatch"
      | "getNonce"
      | "initialize"
      | "validateUserOp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountInitialized"
      | "DiamondCut"
      | "VerificationFailure"
      | "VerificationSuccess"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [UserOperationStruct, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
}

export namespace AccountInitializedEvent {
  export type InputTuple = [entryPoint: AddressLike, ownerPublicKey: BytesLike];
  export type OutputTuple = [entryPoint: string, ownerPublicKey: string];
  export interface OutputObject {
    entryPoint: string;
    ownerPublicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiamondCutEvent {
  export type InputTuple = [
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: AddressLike,
    _calldata: BytesLike
  ];
  export type OutputTuple = [
    _diamondCut: IDiamondCut.FacetCutStructOutput[],
    _init: string,
    _calldata: string
  ];
  export interface OutputObject {
    _diamondCut: IDiamondCut.FacetCutStructOutput[];
    _init: string;
    _calldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationFailureEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationSuccessEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BarzAccountFacet extends BaseContract {
  connect(runner?: ContractRunner | null): BarzAccountFacet;
  waitForDeployment(): Promise<this>;

  interface: BarzAccountFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  entryPoint: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [_dest: AddressLike, _value: BigNumberish, _func: BytesLike],
    [void],
    "nonpayable"
  >;

  executeBatch: TypedContractMethod<
    [_dest: AddressLike[], _value: BigNumberish[], _func: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getNonce: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _verificationFacet: AddressLike,
      _anEntryPoint: AddressLike,
      _facetRegistry: AddressLike,
      _defaultFallBackHandler: AddressLike,
      _ownerPublicKey: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  validateUserOp: TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [_dest: AddressLike, _value: BigNumberish, _func: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [_dest: AddressLike[], _value: BigNumberish[], _func: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _verificationFacet: AddressLike,
      _anEntryPoint: AddressLike,
      _facetRegistry: AddressLike,
      _defaultFallBackHandler: AddressLike,
      _ownerPublicKey: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "AccountInitialized"
  ): TypedContractEvent<
    AccountInitializedEvent.InputTuple,
    AccountInitializedEvent.OutputTuple,
    AccountInitializedEvent.OutputObject
  >;
  getEvent(
    key: "DiamondCut"
  ): TypedContractEvent<
    DiamondCutEvent.InputTuple,
    DiamondCutEvent.OutputTuple,
    DiamondCutEvent.OutputObject
  >;
  getEvent(
    key: "VerificationFailure"
  ): TypedContractEvent<
    VerificationFailureEvent.InputTuple,
    VerificationFailureEvent.OutputTuple,
    VerificationFailureEvent.OutputObject
  >;
  getEvent(
    key: "VerificationSuccess"
  ): TypedContractEvent<
    VerificationSuccessEvent.InputTuple,
    VerificationSuccessEvent.OutputTuple,
    VerificationSuccessEvent.OutputObject
  >;

  filters: {
    "AccountInitialized(address,bytes)": TypedContractEvent<
      AccountInitializedEvent.InputTuple,
      AccountInitializedEvent.OutputTuple,
      AccountInitializedEvent.OutputObject
    >;
    AccountInitialized: TypedContractEvent<
      AccountInitializedEvent.InputTuple,
      AccountInitializedEvent.OutputTuple,
      AccountInitializedEvent.OutputObject
    >;

    "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
      DiamondCutEvent.InputTuple,
      DiamondCutEvent.OutputTuple,
      DiamondCutEvent.OutputObject
    >;
    DiamondCut: TypedContractEvent<
      DiamondCutEvent.InputTuple,
      DiamondCutEvent.OutputTuple,
      DiamondCutEvent.OutputObject
    >;

    "VerificationFailure(bytes32)": TypedContractEvent<
      VerificationFailureEvent.InputTuple,
      VerificationFailureEvent.OutputTuple,
      VerificationFailureEvent.OutputObject
    >;
    VerificationFailure: TypedContractEvent<
      VerificationFailureEvent.InputTuple,
      VerificationFailureEvent.OutputTuple,
      VerificationFailureEvent.OutputObject
    >;

    "VerificationSuccess(bytes32)": TypedContractEvent<
      VerificationSuccessEvent.InputTuple,
      VerificationSuccessEvent.OutputTuple,
      VerificationSuccessEvent.OutputObject
    >;
    VerificationSuccess: TypedContractEvent<
      VerificationSuccessEvent.InputTuple,
      VerificationSuccessEvent.OutputTuple,
      VerificationSuccessEvent.OutputObject
    >;
  };
}
