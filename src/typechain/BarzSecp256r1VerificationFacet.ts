/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export interface BarzSecp256r1VerificationFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "initializeSigner"
      | "isValidKeyType"
      | "isValidSignature"
      | "owner"
      | "self"
      | "uninitializeSigner"
      | "validateOwnerSignature"
      | "validateOwnerSignatureSelector"
      | "validateSignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "SignerInitialized" | "SignerUninitialized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "initializeSigner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidKeyType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "self", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uninitializeSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateOwnerSignature",
    values: [UserOperationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOwnerSignatureSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignature",
    values: [UserOperationStruct, BytesLike, [BigNumberish, BigNumberish]]
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidKeyType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "self", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uninitializeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOwnerSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOwnerSignatureSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSignature",
    data: BytesLike
  ): Result;
}

export namespace SignerInitializedEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerUninitializedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BarzSecp256r1VerificationFacet extends BaseContract {
  connect(runner?: ContractRunner | null): BarzSecp256r1VerificationFacet;
  waitForDeployment(): Promise<this>;

  interface: BarzSecp256r1VerificationFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  initializeSigner: TypedContractMethod<
    [_publicKey: BytesLike],
    [bigint],
    "nonpayable"
  >;

  isValidKeyType: TypedContractMethod<
    [_publicKey: BytesLike],
    [boolean],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  self: TypedContractMethod<[], [string], "view">;

  uninitializeSigner: TypedContractMethod<[], [bigint], "nonpayable">;

  validateOwnerSignature: TypedContractMethod<
    [userOp: UserOperationStruct, userOpHash: BytesLike],
    [bigint],
    "view"
  >;

  validateOwnerSignatureSelector: TypedContractMethod<[], [string], "view">;

  validateSignature: TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      q: [BigNumberish, BigNumberish]
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "initializeSigner"
  ): TypedContractMethod<[_publicKey: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "isValidKeyType"
  ): TypedContractMethod<[_publicKey: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [_hash: BytesLike, _signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "self"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uninitializeSigner"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "validateOwnerSignature"
  ): TypedContractMethod<
    [userOp: UserOperationStruct, userOpHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateOwnerSignatureSelector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "validateSignature"
  ): TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      q: [BigNumberish, BigNumberish]
    ],
    [bigint],
    "view"
  >;

  getEvent(
    key: "SignerInitialized"
  ): TypedContractEvent<
    SignerInitializedEvent.InputTuple,
    SignerInitializedEvent.OutputTuple,
    SignerInitializedEvent.OutputObject
  >;
  getEvent(
    key: "SignerUninitialized"
  ): TypedContractEvent<
    SignerUninitializedEvent.InputTuple,
    SignerUninitializedEvent.OutputTuple,
    SignerUninitializedEvent.OutputObject
  >;

  filters: {
    "SignerInitialized(bytes)": TypedContractEvent<
      SignerInitializedEvent.InputTuple,
      SignerInitializedEvent.OutputTuple,
      SignerInitializedEvent.OutputObject
    >;
    SignerInitialized: TypedContractEvent<
      SignerInitializedEvent.InputTuple,
      SignerInitializedEvent.OutputTuple,
      SignerInitializedEvent.OutputObject
    >;

    "SignerUninitialized()": TypedContractEvent<
      SignerUninitializedEvent.InputTuple,
      SignerUninitializedEvent.OutputTuple,
      SignerUninitializedEvent.OutputObject
    >;
    SignerUninitialized: TypedContractEvent<
      SignerUninitializedEvent.InputTuple,
      SignerUninitializedEvent.OutputTuple,
      SignerUninitializedEvent.OutputObject
    >;
  };
}
